from msvcrt import kbhit
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from id import token
from random import randint

bot = Bot(token = token)
dp = Dispatcher(bot)

word = ['–∞—Ä–±—É–∑', '–¥–≤–µ—Ä—å', '—è–≥–æ–¥–∞', '—Ç–µ–∫—Å—Ç', '–∞—Ç–ª–∞—Å', '–±–∞–∑–∞—Ä', '–¥—ã—Ä–∫–∞', '–¥–∞–≤—É—á', '–Ω–µ—Ñ—Ç—å', '—Å–æ—Å—É–¥', '—è–±–µ–¥–∞']

o = len(word)

x = 0


# –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb1 = InlineKeyboardMarkup()

kb1_btn1 = InlineKeyboardButton('—Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', url='https://t.me/cykarlk')

kb1.add(kb1_btn1)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb0 = ReplyKeyboardMarkup(resize_keyboard=True)

kb0_btn1 = KeyboardButton('üéÆ –ò–≥—Ä–∞—Ç—å')
kb0_btn2 = KeyboardButton('üìé –ü—Ä–∞–≤–∏–ª–∞')

kb0.add(kb0_btn1, kb0_btn2)


kb2 = ReplyKeyboardMarkup(resize_keyboard=True)

kb2_btn1 = KeyboardButton('/start')

kb2.add(kb2_btn1)


#         START
@dp.message_handler(commands = 'start')
async def process_photo(message: types.Message):
    await bot.send_message(message.from_user.id, ('ü§ñ: üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã ¬´Intermath¬ª. –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã –Ω–∞–∂–º–∏ –Ω–∞ ¬´–ü—Ä–∞–≤–∏–ª–∞¬ª.'), reply_markup=kb0)




#         GAME

@dp.message_handler(lambda message: message.text in 'üéÆ –ò–≥—Ä–∞—Ç—å')
async def process_photo(message: types.Message):
    await bot.send_message(message.from_user.id, ('–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É'))
    global x
    x = word[randint(0, (o-1))]
    await bot.send_message(message.from_user.id, ('–í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑ 5-—Ç–∏ –±—É–∫–≤'))
    @dp.message_handler(lambda message: message.text)
    async def process_photo(message: types.Message):
        r = str(message.text)
        if len(message.text) <= 5:
            if message.text == x:
                await bot.send_message(message.from_user.id, ('–£—Ä–∞ –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!'))
            else:
                for i in range(0, 5):
                    for y in range(0, 5):
                        if x[i] == r[y]: 
                            if i == y:
                                await bot.send_message(message.from_user.id, (f'–û–≥–æ –≤—ã —É–≥–∞–¥–∞–ª–∏, {i+1}-—è –±—É–∫–≤–∞ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞: {x[i]}'))
                            else:
                                await bot.send_message(message.from_user.id, (f'–í —ç—Ç–æ–º —Å–ª–æ–æ–≤–µ –µ—Å—Ç—å –±—É–∫–≤–∞: {x[i]}, –Ω–æ –æ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ'))
        else:
            await bot.send_message(message.from_user.id, ('–Ω–µ—Ç, –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ –±–æ–ª—å—à–µ 5 –±—É–∫–≤'))




#       RULE

@dp.message_handler(lambda message: message.text in 'üìé –ü—Ä–∞–≤–∏–ª–∞' )
async def process_photo(message: types.Message):
    await bot.send_message(message.from_user.id, ('üìî–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ¬´Intermath¬ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã! –£ —Ç–µ–±—è –µ—Å—Ç—å 6 –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ –º–Ω–æ–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ (–ø–æ–¥—Å–∫–∞–∑–∫–∞‚Äì—Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ). –ï—Å—Ç—å —Ç—ã —Å–º–æ–≥ –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, —Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª. –ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª‚Äì–Ω–∞—á–∏–Ω–∞–µ—à—å –∑–∞–Ω–æ–≤–æ. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å? –ñ–º–∏ ¬´–ò–≥–∞—Ç—å¬ª.'))
    await bot.send_message(message.from_user.id, ('üí°–í—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–Ω–∏–∑—É, –Ω–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'), reply_markup=kb1)
    print(message.from_user.id)




while True:
    executor.start_polling(dp, skip_updates=True)